<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key = "none"
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(vk_add){key="vk_add";} //No response
if keyboard_check_pressed(vk_alt){key="vk_alt";} //No response
if keyboard_check_pressed(vk_backspace){key="vk_backspace";} //Works, back key
if keyboard_check_pressed(vk_control){key="vk_control";}  //No response
if keyboard_check_pressed(vk_decimal){key="vk_decimal";}  //No response
if keyboard_check_pressed(vk_delete){key="vk_delete";}  //No response
if keyboard_check_pressed(vk_divide){key="vk_divide";}  //No response
if keyboard_check_pressed(vk_down){key="vk_down";}  //Works, down key
if keyboard_check_pressed(vk_end){key="vk_end";}  //No response
if keyboard_check_pressed(vk_enter){key="vk_enter";}  //Works, enter key
if keyboard_check_pressed(vk_escape){key="vk_escape";}  //No response
if keyboard_check_pressed(vk_f1){key="vk_f1";}  //No response
if keyboard_check_pressed(vk_f2){key="vk_f2";}  //No response
if keyboard_check_pressed(vk_f3){key="vk_f3";}  //No response
if keyboard_check_pressed(vk_f4){key="vk_f4";}  //No response
if keyboard_check_pressed(vk_f5){key="vk_f5";}  //No response
if keyboard_check_pressed(vk_f6){key="vk_f6";}  //No response
if keyboard_check_pressed(vk_f7){key="vk_f7";}  //No response
if keyboard_check_pressed(vk_f8){key="vk_f8";}  //No response
if keyboard_check_pressed(vk_f9){key="vk_f9";}  //No response
if keyboard_check_pressed(vk_f10){key="vk_f10";}  //No response
if keyboard_check_pressed(vk_f11){key="vk_f11";}  //No response
if keyboard_check_pressed(vk_f12){key="vk_f12";}  //No response
if keyboard_check_pressed(vk_home){key="vk_home";}  //No response
if keyboard_check_pressed(vk_insert){key="vk_insert";}  //No response
if keyboard_check_pressed(vk_lalt){key="vk_lalt";}  //No response
if keyboard_check_pressed(vk_lcontrol){key="vk_lcontrol";}  //No response
if keyboard_check_pressed(vk_left){key="vk_left";}  //Works, left key
if keyboard_check_pressed(vk_lshift){key="vk_lshift";}  //No response
if keyboard_check_pressed(vk_multiply){key="vk_multiply";}  //No response
if keyboard_check_pressed(vk_numpad0){key="vk_numpad0";}  //No response
if keyboard_check_pressed(vk_numpad1){key="vk_numpad1";}  //No response
if keyboard_check_pressed(vk_numpad2){key="vk_numpad2";}  //No response
if keyboard_check_pressed(vk_numpad3){key="vk_numpad3";}  //No response
if keyboard_check_pressed(vk_numpad4){key="vk_numpad4";}  //No response
if keyboard_check_pressed(vk_numpad5){key="vk_numpad5";}  //No response
if keyboard_check_pressed(vk_numpad6){key="vk_numpad6";}  //No response
if keyboard_check_pressed(vk_numpad7){key="vk_numpad7";}  //No response
if keyboard_check_pressed(vk_numpad8){key="vk_numpad8";}  //No response
if keyboard_check_pressed(vk_numpad9){key="vk_numpad9";}  //No response
if keyboard_check_pressed(vk_pagedown){key="vk_pagedown";}  //No response
if keyboard_check_pressed(vk_pageup){key="vk_pageup";}  //No response
if keyboard_check_pressed(vk_pause){key="vk_pause";}  //No response
if keyboard_check_pressed(vk_printscreen){key="vk_printscreen";}  //No response
if keyboard_check_pressed(vk_ralt){key="vk_ralt";}  //No response
if keyboard_check_pressed(vk_rcontrol){key="vk_rcontrol";}  //Works, # key
if keyboard_check_pressed(vk_right){key="vk_right";}  //Works, right key
if keyboard_check_pressed(vk_rshift){key="vk_rshift";}  //No response
if keyboard_check_pressed(vk_space){key="vk_space";}  //No response
if keyboard_check_pressed(vk_subtract){key="vk_subtract";}  //No response
if keyboard_check_pressed(vk_tab){key="vk_tab";}  //No response
if keyboard_check_pressed(vk_up){key="vk_up";}  //Works, up key

//These are all not working
if keyboard_check_pressed(ord("A")){key="A";}
if keyboard_check_pressed(ord("B")){key="B";}
if keyboard_check_pressed(ord("C")){key="C";}
if keyboard_check_pressed(ord("D")){key="D";}
if keyboard_check_pressed(ord("E")){key="E";}
if keyboard_check_pressed(ord("F")){key="F";}
if keyboard_check_pressed(ord("G")){key="G";}
if keyboard_check_pressed(ord("H")){key="H";}
if keyboard_check_pressed(ord("I")){key="I";}
if keyboard_check_pressed(ord("J")){key="J";}
if keyboard_check_pressed(ord("K")){key="K";}
if keyboard_check_pressed(ord("L")){key="L";}
if keyboard_check_pressed(ord("M")){key="M";}
if keyboard_check_pressed(ord("N")){key="N";}
if keyboard_check_pressed(ord("O")){key="O";}
if keyboard_check_pressed(ord("P")){key="P";}
if keyboard_check_pressed(ord("Q")){key="Q";}
if keyboard_check_pressed(ord("R")){key="R";}
if keyboard_check_pressed(ord("S")){key="S";}
if keyboard_check_pressed(ord("T")){key="T";}
if keyboard_check_pressed(ord("U")){key="U";}
if keyboard_check_pressed(ord("V")){key="V";}
if keyboard_check_pressed(ord("W")){key="W";}
if keyboard_check_pressed(ord("X")){key="X";}
if keyboard_check_pressed(ord("Y")){key="Y";}
if keyboard_check_pressed(ord("Z")){key="Z";}
//End
//These are all working fine
if keyboard_check_pressed(ord("1")){key="1";}
if keyboard_check_pressed(ord("2")){key="2";}
if keyboard_check_pressed(ord("3")){key="3";}
if keyboard_check_pressed(ord("4")){key="4";}
if keyboard_check_pressed(ord("5")){key="5";}
if keyboard_check_pressed(ord("6")){key="6";}
if keyboard_check_pressed(ord("7")){key="7";}
if keyboard_check_pressed(ord("8")){key="8";}
if keyboard_check_pressed(ord("9")){key="9";}
if keyboard_check_pressed(ord("0")){key="0";}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_black);
draw_set_font(font0);
draw_text(x, y, key);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
